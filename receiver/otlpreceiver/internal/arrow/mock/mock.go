// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/collector/receiver/otlpreceiver/internal/arrow (interfaces: Consumers)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	consumer "go.opentelemetry.io/collector/consumer"
)

// MockConsumers is a mock of Consumers interface.
type MockConsumers struct {
	ctrl     *gomock.Controller
	recorder *MockConsumersMockRecorder
}

// MockConsumersMockRecorder is the mock recorder for MockConsumers.
type MockConsumersMockRecorder struct {
	mock *MockConsumers
}

// NewMockConsumers creates a new mock instance.
func NewMockConsumers(ctrl *gomock.Controller) *MockConsumers {
	mock := &MockConsumers{ctrl: ctrl}
	mock.recorder = &MockConsumersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumers) EXPECT() *MockConsumersMockRecorder {
	return m.recorder
}

// Logs mocks base method.
func (m *MockConsumers) Logs() consumer.Logs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs")
	ret0, _ := ret[0].(consumer.Logs)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockConsumersMockRecorder) Logs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockConsumers)(nil).Logs))
}

// Metrics mocks base method.
func (m *MockConsumers) Metrics() consumer.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(consumer.Metrics)
	return ret0
}

// Metrics indicates an expected call of Metrics.
func (mr *MockConsumersMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockConsumers)(nil).Metrics))
}

// Traces mocks base method.
func (m *MockConsumers) Traces() consumer.Traces {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Traces")
	ret0, _ := ret[0].(consumer.Traces)
	return ret0
}

// Traces indicates an expected call of Traces.
func (mr *MockConsumersMockRecorder) Traces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traces", reflect.TypeOf((*MockConsumers)(nil).Traces))
}
